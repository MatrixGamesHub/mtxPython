#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MtxRendererService import MtxRendererService
from MtxRendererService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void Ping()')
    print('  void Shutdown()')
    print('  void Freeze()')
    print('  void Thaw()')
    print('  void Pause()')
    print('  void Resume()')
    print('  void Clear()')
    print('   GetPreferedFieldSize()')
    print('  void LoadLevel( field, LevelInfo levelInfo)')
    print('  void ResetLevel( field)')
    print('  void Spawn(i16 objId, i8 symbol, i16 positionX, i16 positionY)')
    print('  void Remove(i16 objectId, i16 sourceId)')
    print('  void Collect(i16 objectId, i16 sourceId)')
    print('  void TriggerEnter(i16 objectId, i16 sourceId)')
    print('  void TriggerLeave(i16 objectId, i16 sourceId)')
    print('  void Move(i16 objectId, Direction direction, i16 fromX, i16 fromY, i16 toX, i16 toY)')
    print('  void Jump(i16 objectId, Direction direction, i16 fromX, i16 fromY, i16 toX, i16 toY)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MtxRendererService.Client(protocol)
transport.open()

if cmd == 'Ping':
    if len(args) != 0:
        print('Ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.Ping())

elif cmd == 'Shutdown':
    if len(args) != 0:
        print('Shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.Shutdown())

elif cmd == 'Freeze':
    if len(args) != 0:
        print('Freeze requires 0 args')
        sys.exit(1)
    pp.pprint(client.Freeze())

elif cmd == 'Thaw':
    if len(args) != 0:
        print('Thaw requires 0 args')
        sys.exit(1)
    pp.pprint(client.Thaw())

elif cmd == 'Pause':
    if len(args) != 0:
        print('Pause requires 0 args')
        sys.exit(1)
    pp.pprint(client.Pause())

elif cmd == 'Resume':
    if len(args) != 0:
        print('Resume requires 0 args')
        sys.exit(1)
    pp.pprint(client.Resume())

elif cmd == 'Clear':
    if len(args) != 0:
        print('Clear requires 0 args')
        sys.exit(1)
    pp.pprint(client.Clear())

elif cmd == 'GetPreferedFieldSize':
    if len(args) != 0:
        print('GetPreferedFieldSize requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetPreferedFieldSize())

elif cmd == 'LoadLevel':
    if len(args) != 2:
        print('LoadLevel requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoadLevel(eval(args[0]), eval(args[1]),))

elif cmd == 'ResetLevel':
    if len(args) != 1:
        print('ResetLevel requires 1 args')
        sys.exit(1)
    pp.pprint(client.ResetLevel(eval(args[0]),))

elif cmd == 'Spawn':
    if len(args) != 4:
        print('Spawn requires 4 args')
        sys.exit(1)
    pp.pprint(client.Spawn(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'Remove':
    if len(args) != 2:
        print('Remove requires 2 args')
        sys.exit(1)
    pp.pprint(client.Remove(eval(args[0]), eval(args[1]),))

elif cmd == 'Collect':
    if len(args) != 2:
        print('Collect requires 2 args')
        sys.exit(1)
    pp.pprint(client.Collect(eval(args[0]), eval(args[1]),))

elif cmd == 'TriggerEnter':
    if len(args) != 2:
        print('TriggerEnter requires 2 args')
        sys.exit(1)
    pp.pprint(client.TriggerEnter(eval(args[0]), eval(args[1]),))

elif cmd == 'TriggerLeave':
    if len(args) != 2:
        print('TriggerLeave requires 2 args')
        sys.exit(1)
    pp.pprint(client.TriggerLeave(eval(args[0]), eval(args[1]),))

elif cmd == 'Move':
    if len(args) != 6:
        print('Move requires 6 args')
        sys.exit(1)
    pp.pprint(client.Move(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'Jump':
    if len(args) != 6:
        print('Jump requires 6 args')
        sys.exit(1)
    pp.pprint(client.Jump(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
